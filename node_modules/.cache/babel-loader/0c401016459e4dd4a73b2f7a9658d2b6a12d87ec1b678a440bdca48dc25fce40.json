{"ast":null,"code":"var _jsxFileName = \"/workspace/3C-GRAFFIC/GrowthStage/src/components/Completion/CompletionRateChart.js\",\n  _s = $RefreshSig$();\n// CompletionRateChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompletionRateChart() {\n  _s();\n  const [completionRateData, setCompletionRateData] = useState([]);\n  const [completionRateChartData, setCompletionRateChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchAllPages(apiToken) {\n      let currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      try {\n        const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${currentPage}&api_token=${apiToken}`);\n        const data = response.data.data;\n        console.log(`API Response Data for Completion Rate (Page ${currentPage}):`, data);\n        const newCompletionRateData = data.map(campaign => ({\n          name: campaign.name,\n          completion_rate: campaign.exit_manual_mode === 30 ? 1 : 0\n        }));\n        console.log(`Formatted Completion Rate Data (Page ${currentPage}):`, newCompletionRateData);\n        setCompletionRateData(prevData => [...prevData, ...newCompletionRateData]);\n\n        // Continue fetching next page if available\n        if (response.data.meta.current_page < response.data.meta.last_page) {\n          fetchAllPages(apiToken, currentPage + 1);\n        } else {\n          // All pages processed, generate chart data\n          const chartData = {\n            series: [{\n              name: 'Completion Rate',\n              data: completionRateData.map(item => item.completion_rate)\n            }],\n            options: {\n              chart: {\n                height: 350,\n                type: 'bar'\n              },\n              xaxis: {\n                categories: completionRateData.map(item => item.name)\n              },\n              title: {\n                text: 'Completion Rate of Campaigns',\n                align: 'center'\n              }\n            }\n          };\n          console.log('Completion Rate Chart Data:', chartData);\n          setCompletionRateChartData(chartData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching completion rate data:', error);\n        setError('Error fetching completion rate data. Please try again later.');\n        setLoading(false);\n      }\n    }\n    const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n    fetchAllPages(apiToken);\n  }, [completionRateData]); // Adicionando completionRateData como dependência para acionar o fetchAllPages quando ele é atualizado\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-3 mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Completion Rate of Campaigns\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: completionRateChartData.options,\n      series: completionRateChartData.series,\n      type: \"bar\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(CompletionRateChart, \"m9A2YrcMl/TlLsftIWYCXzW08+A=\");\n_c = CompletionRateChart;\nexport default CompletionRateChart;\nvar _c;\n$RefreshReg$(_c, \"CompletionRateChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","jsxDEV","_jsxDEV","CompletionRateChart","_s","completionRateData","setCompletionRateData","completionRateChartData","setCompletionRateChartData","loading","setLoading","error","setError","fetchAllPages","apiToken","currentPage","arguments","length","undefined","response","get","data","console","log","newCompletionRateData","map","campaign","name","completion_rate","exit_manual_mode","prevData","meta","current_page","last_page","chartData","series","item","options","chart","height","type","xaxis","categories","title","text","align","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/workspace/3C-GRAFFIC/GrowthStage/src/components/Completion/CompletionRateChart.js"],"sourcesContent":["// CompletionRateChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\n\nfunction CompletionRateChart() {\n  const [completionRateData, setCompletionRateData] = useState([]);\n  const [completionRateChartData, setCompletionRateChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchAllPages(apiToken, currentPage = 1) {\n      try {\n        const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${currentPage}&api_token=${apiToken}`);\n\n        const data = response.data.data;\n\n        console.log(`API Response Data for Completion Rate (Page ${currentPage}):`, data);\n\n        const newCompletionRateData = data.map((campaign) => ({\n          name: campaign.name,\n          completion_rate: campaign.exit_manual_mode === 30 ? 1 : 0,\n        }));\n\n        console.log(`Formatted Completion Rate Data (Page ${currentPage}):`, newCompletionRateData);\n\n        setCompletionRateData((prevData) => [...prevData, ...newCompletionRateData]);\n\n        // Continue fetching next page if available\n        if (response.data.meta.current_page < response.data.meta.last_page) {\n          fetchAllPages(apiToken, currentPage + 1);\n        } else {\n          // All pages processed, generate chart data\n          const chartData = {\n            series: [\n              { name: 'Completion Rate', data: completionRateData.map((item) => item.completion_rate) },\n            ],\n            options: {\n              chart: {\n                height: 350,\n                type: 'bar',\n              },\n              xaxis: {\n                categories: completionRateData.map((item) => item.name),\n              },\n              title: {\n                text: 'Completion Rate of Campaigns',\n                align: 'center',\n              },\n            },\n          };\n\n          console.log('Completion Rate Chart Data:', chartData);\n\n          setCompletionRateChartData(chartData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching completion rate data:', error);\n        setError('Error fetching completion rate data. Please try again later.');\n        setLoading(false);\n      }\n    }\n\n    const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n    fetchAllPages(apiToken);\n  }, [completionRateData]); // Adicionando completionRateData como dependência para acionar o fetchAllPages quando ele é atualizado\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div className='container-fluid mt-3 mb-3'>\n      <h2>Completion Rate of Campaigns</h2>\n      <Chart\n        options={completionRateChartData.options}\n        series={completionRateChartData.series}\n        type='bar'\n        height={350}\n      />\n    </div>\n  );\n}\n\nexport default CompletionRateChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}